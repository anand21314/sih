# app.py

import streamlit as st
from PIL import Image
import torch
import timm
from torchvision import transforms
import numpy as np
from pytorch_grad_cam import GradCAM
from pytorch_grad_cam.utils.image import show_cam_on_image
from gtts import gTTS
import io

# --------------------
# 1. Model Setup
# --------------------
num_classes = 12
model = timm.create_model('efficientnet_b0', pretrained=False, num_classes=num_classes)
model_path = "efficientb0_breed_classifier.pth"
model.load_state_dict(torch.load(model_path, map_location=torch.device('cpu')))
model.eval()

# --------------------
# 2. Image Preprocessing
# --------------------
preprocess = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406],
                         [0.229, 0.224, 0.225])
])

# --------------------
# 3. Prediction Function
# --------------------
def predict(image):
    image = image.convert("RGB")
    image_tensor = preprocess(image).unsqueeze(0)
    with torch.no_grad():
        outputs = model(image_tensor)
        probabilities = torch.softmax(outputs, dim=1)
        confidence, predicted = torch.max(probabilities, 1)
    return predicted.item(), confidence.item(), probabilities, image_tensor

# --------------------
# 4. Grad-CAM Function
# --------------------
def generate_gradcam(image_tensor, target_class):
    target_layers = [model.conv_head]
    cam = GradCAM(model=model, target_layers=target_layers)
    grayscale_cam = cam(input_tensor=image_tensor.cpu())[0, :]
    rgb_img = image_tensor.squeeze(0).permute(1, 2, 0).cpu().numpy()
    rgb_img = np.clip((rgb_img * [0.229, 0.224, 0.225]) + [0.485, 0.456, 0.406], 0, 1)

    # Overlay Grad-CAM exactly over image size
    visualization = show_cam_on_image(rgb_img, grayscale_cam, use_rgb=True)
    return visualization

# --------------------
# 5. Breed Labels + Info
# --------------------
breeds = [
    "Brown_Swiss", "Deoni", "Gir", "Holstein_Friesian", "Jaffrabadi", "Kangayam",
    "Kankrej", "Khillari", "Murrah", "Pandharpuri", "Sahiwal", "Toda"
]

breed_info_en = {
    "Brown_Swiss": "Known for high milk yield and docile temperament.",
    "Deoni": "Indigenous dual-purpose breed for milk and draught.",
    "Gir": "Famous for quality milk and resistance to disease.",
    "Holstein_Friesian": "Popular dairy breed worldwide with very high yield.",
    "Jaffrabadi": "Large buffalo breed used for both milk and draught.",
    "Kangayam": "Hardy draught breed from Tamil Nadu.",
    "Kankrej": "Dual-purpose breed with good milk and work ability.",
    "Khillari": "Strong draught breed found in Maharashtra.",
    "Murrah": "Buffalo breed famous for very high milk yield.",
    "Pandharpuri": "Indigenous cattle breed from Maharashtra.",
    "Sahiwal": "One of the best indigenous dairy breeds from Punjab.",
    "Toda": "Rare buffalo breed with unique appearance, from Nilgiris."
}

breed_info_te = {
    "Brown_Swiss": "‡∞¨‡±ç‡∞∞‡±å‡∞®‡±ç ‡∞∏‡±ç‡∞µ‡∞ø‡∞∏‡±ç: ‡∞é‡∞ï‡±ç‡∞ï‡±Å‡∞µ ‡∞™‡∞æ‡∞≤‡∞®‡±Å ‡∞á‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞®‡∞ø‡∞¨‡∞¶‡±ç‡∞ß‡∞§ ‡∞ï‡∞≤‡∞ø‡∞ó‡∞ø ‡∞â‡∞Ç‡∞ü‡±Å‡∞Ç‡∞¶‡∞ø.",
    "Deoni": "‡∞°‡∞ø‡∞Ø‡±ã‡∞®‡∞ø: ‡∞™‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡∞®‡∞ø ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞ú‡∞æ‡∞§‡∞ø.",
    "Gir": "‡∞ó‡∞ø‡∞∞‡±ç: ‡∞â‡∞®‡±ç‡∞®‡∞§ ‡∞®‡∞æ‡∞£‡±ç‡∞Ø‡∞§ ‡∞™‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞µ‡±ç‡∞Ø‡∞æ‡∞ß‡∞ø ‡∞®‡∞ø‡∞∞‡±ã‡∞ß‡∞ï‡∞§‡∞§‡±ã ‡∞™‡±ç‡∞∞‡∞∏‡∞ø‡∞¶‡±ç‡∞ß‡∞ø ‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞Ç‡∞¶‡∞ø.",
    "Holstein_Friesian": "‡∞π‡±ã‡∞≤‡±ç‡∞∏‡±ç‡∞ü‡±à‡∞®‡±ç ‡∞´‡±ç‡∞∞‡∞ø‡∞ú‡∞ø‡∞Ø‡∞®‡±ç: ‡∞™‡±ç‡∞∞‡∞™‡∞Ç‡∞ö‡∞µ‡±ç‡∞Ø‡∞æ‡∞™‡±ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞™‡±ç‡∞∞‡∞æ‡∞ö‡±Å‡∞∞‡±ç‡∞Ø‡∞Ç ‡∞™‡±ä‡∞Ç‡∞¶‡∞ø‡∞® ‡∞™‡∞æ‡∞≤‡±Å ‡∞á‡∞∏‡±ç‡∞§‡±á ‡∞ú‡∞æ‡∞§‡∞ø.",
    "Jaffrabadi": "‡∞ú‡∞´‡±ç‡∞∞‡∞æ‡∞¨‡∞°‡∞ø: ‡∞™‡±Ü‡∞¶‡±ç‡∞¶ ‡∞Ü‡∞µ‡±Å ‡∞ú‡∞æ‡∞§‡∞ø, ‡∞™‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡∞®‡∞ø ‡∞ï‡±ã‡∞∏‡∞Ç.",
    "Kangayam": "‡∞ï‡∞Ç‡∞ó‡∞æ‡∞Ø‡∞Ç: ‡∞§‡∞Æ‡∞ø‡∞≥‡∞®‡∞æ‡∞°‡±Å‡∞≤‡±ã ‡∞Æ‡∞®‡±ç‡∞®‡∞ø‡∞Ç‡∞™‡±Å ‡∞â‡∞®‡±ç‡∞® ‡∞™‡∞®‡∞ø ‡∞ú‡∞æ‡∞§‡∞ø.",
    "Kankrej": "‡∞ï‡∞Ç‡∞ï‡±ç‡∞∞‡±á‡∞ú‡±ç: ‡∞™‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡∞®‡∞ø ‡∞∏‡∞æ‡∞Æ‡∞∞‡±ç‡∞•‡±ç‡∞Ø‡∞Ç ‡∞ï‡∞≤‡∞ø‡∞ó‡∞ø‡∞® ‡∞¶‡±ç‡∞µ‡∞ø‡∞™‡∞∞‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó ‡∞ú‡∞æ‡∞§‡∞ø.",
    "Khillari": "‡∞ñ‡∞ø‡∞≤‡±ç‡∞≤‡∞æ‡∞∞‡∞ø: ‡∞Æ‡∞π‡∞æ‡∞∞‡∞æ‡∞∑‡±ç‡∞ü‡±ç‡∞∞‡∞≤‡±ã ‡∞¶‡±É‡∞¢‡∞Æ‡±à‡∞® ‡∞™‡∞®‡∞ø ‡∞ú‡∞æ‡∞§‡∞ø.",
    "Murrah": "‡∞Æ‡±Å‡∞∞‡±ç‡∞∞‡∞æ: ‡∞Ö‡∞ß‡∞ø‡∞ï ‡∞™‡∞æ‡∞≤‡∞®‡±Å ‡∞á‡∞∏‡±ç‡∞§‡±á ‡∞ú‡∞æ‡∞§‡±Ä‡∞Ø ‡∞ú‡∞æ‡∞¨‡∞ø‡∞§‡∞æ.",
    "Pandharpuri": "‡∞™‡∞Ç‡∞ß‡∞∞‡±ç‡∞™‡±Å‡∞∞‡∞ø: ‡∞Æ‡∞π‡∞æ‡∞∞‡∞æ‡∞∑‡±ç‡∞ü‡±ç‡∞∞‡∞≤‡±ã ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞Ü‡∞µ‡±Å ‡∞ú‡∞æ‡∞§‡∞ø.",
    "Sahiwal": "‡∞∏‡∞æ‡∞π‡∞ø‡∞µ‡∞æ‡∞≤‡±ç: ‡∞™‡∞Ç‡∞ö‡∞æ‡∞¨‡±ç ‡∞≤‡±ã ‡∞Ö‡∞§‡±ç‡∞Ø‡±Å‡∞§‡±ç‡∞§‡∞Æ ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞™‡∞æ‡∞≤‡±Å ‡∞á‡∞∏‡±ç‡∞§‡±á ‡∞ú‡∞æ‡∞§‡∞ø.",
    "Toda": "‡∞ü‡±ã‡∞°‡∞æ: ‡∞®‡±Ä‡∞≤‡∞ó‡∞ø‡∞∞‡±Å‡∞≤‡±ç‡∞≤‡±ã ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡±á‡∞ï ‡∞∞‡±Ç‡∞™‡∞Ç ‡∞ï‡∞≤‡∞ø‡∞ó‡∞ø‡∞® ‡∞Ö‡∞∞‡±Å‡∞¶‡±à‡∞® ‡∞ú‡∞æ‡∞¨‡∞ø‡∞§‡∞æ."
}

# --------------------
# 6. Text-to-Speech
# --------------------
def speak(text, lang='en'):
    tts = gTTS(text=text, lang=lang)
    audio_bytes = io.BytesIO()
    tts.write_to_fp(audio_bytes)
    audio_bytes.seek(0)
    st.audio(audio_bytes, format='audio/mp3')

# --------------------
# 7. Streamlit UI
# --------------------
st.set_page_config(page_title="GoNethra", page_icon="üêÑ", layout="wide")

# Green gradient background
st.markdown("""
    <style>
    .stApp {background: linear-gradient(to right, #a8e063, #56ab2f);}
    </style>
""", unsafe_allow_html=True)

# Sidebar
st.sidebar.title("üìå About GoNethra")
st.sidebar.write("AI-powered Cattle Breed Classifier with Grad-CAM and Voice Feature üêÑ")
st.sidebar.markdown("---")
st.sidebar.write("üë®‚Äçüíª Developed for Smart India Hackathon")

# Language selection
language = st.sidebar.selectbox("Select Language | ‡∞≠‡∞æ‡∞∑ ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø", ["English", "Telugu"])

# Main content
if language == "English":
    st.title("üêÑ GoNethra")
    st.subheader("AI-powered Cattle Breed Classifier with Grad-CAM & Voice")
else:
    st.title("üêÑ ‡∞ó‡±ã‡∞®‡±á‡∞§‡±ç‡∞∞")
    st.subheader("‡∞è‡∞ê ‡∞Ü‡∞ß‡∞æ‡∞∞‡∞ø‡∞§ ‡∞™‡∞∂‡±Å ‡∞ú‡∞æ‡∞§‡∞ø ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞™‡±Å, Grad-CAM ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞´‡±Ä‡∞ö‡∞∞‡±ç")

uploaded_file = st.file_uploader("üì∑ Upload an image | ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    col1, col2 = st.columns([1, 1.5])

    # Prediction
    breed_index, confidence, probs, image_tensor = predict(image)
    predicted_breed = breeds[breed_index]

    with col1:
        st.image(image, caption='Uploaded Image', use_container_width=True)


    with col2:
        if language == "English":
            st.success(f"‚úÖ Predicted Breed: **{predicted_breed}**")
            st.info(f"üîç Confidence: {confidence*100:.2f}%")
            st.markdown(f"### üìñ About {predicted_breed}")
            st.write(breed_info_en[predicted_breed])
            st.markdown("### üìä Top 3 Predictions")
        else:
            st.success(f"‚úÖ ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞ú‡∞æ‡∞§‡∞ø: **{predicted_breed}**")
            st.info(f"üîç ‡∞®‡∞Æ‡±ç‡∞Æ‡∞ï‡∞Ç: {confidence*100:.2f}%")
            st.markdown(f"### üìñ {predicted_breed} ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø")
            st.write(breed_info_te[predicted_breed])
            st.markdown("### üìä ‡∞Ö‡∞ó‡±ç‡∞∞ 3 ‡∞ä‡∞π‡∞ø‡∞Ç‡∞™‡±Å‡∞≤‡±Å")

        # Top 3 predictions
        top3_idx = np.argsort(probs.squeeze().numpy())[-3:][::-1]
        for idx in top3_idx:
            prob_percent = probs[0, idx]*100
            st.write(f"- {breeds[idx]}: {prob_percent:.2f}%")

        # Grad-CAM exactly same size as input image
        gradcam_image = generate_gradcam(image_tensor, breed_index)
        if language == "English":
            st.markdown("### üî• Model Attention (Grad-CAM)")
        else:
            st.markdown("### üî• ‡∞Æ‡±ã‡∞°‡∞≤‡±ç ‡∞¶‡±É‡∞∑‡±ç‡∞ü‡∞ø (Grad-CAM)")
        st.image(gradcam_image, use_column_width=True)

        # Speak button
        if st.button("üîä Speak Breed Name | ‡∞ú‡∞æ‡∞§‡∞ø ‡∞™‡±á‡∞∞‡±Å ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡±Å"):
            if language == "English":
                speak(f"The predicted breed is {predicted_breed}", lang='en')
            else:
                speak(predicted_breed, lang='te')

# Explore all breeds
st.markdown("---")
if language == "English":
    st.subheader("üìö Explore All Breeds")
else:
    st.subheader("üìö ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞ú‡∞æ‡∞§‡±Å‡∞≤‡∞®‡±Å ‡∞Ö‡∞®‡±ç‡∞µ‡±á‡∞∑‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø")
selected_breed = st.selectbox("Choose a breed | ‡∞ú‡∞æ‡∞§‡∞ø‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø", breeds)
if language == "English":
    st.write(breed_info_en[selected_breed])
else:
    st.write(breed_info_te[selected_breed])
